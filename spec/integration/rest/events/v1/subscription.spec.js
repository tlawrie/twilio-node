'use strict';

/* jshint ignore:start */
/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /
 */
/* jshint ignore:end */

var Holodeck = require('../../../holodeck');  /* jshint ignore:line */
var Request = require(
    '../../../../../lib/http/request');  /* jshint ignore:line */
var Response = require(
    '../../../../../lib/http/response');  /* jshint ignore:line */
var RestException = require(
    '../../../../../lib/base/RestException');  /* jshint ignore:line */
var Twilio = require('../../../../../lib');  /* jshint ignore:line */
var serialize = require(
    '../../../../../lib/base/serialize');  /* jshint ignore:line */


var client;
var holodeck;

describe('Subscription', function() {
  beforeEach(function() {
    holodeck = new Holodeck();
    client = new Twilio('ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'AUTHTOKEN', {
      httpClient: holodeck
    });
  });
  it('should treat the first each arg as a callback',
    function(done) {
      var body = {
          'subscriptions': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'A subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
                  }
              },
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'Another subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab/SubscribedEvents'
                  }
              }
          ],
          'meta': {
              'page': 0,
              'page_size': 20,
              'first_page_url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'previous_page_url': null,
              'url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'next_page_url': null,
              'key': 'subscriptions'
          }
      };
      holodeck.mock(new Response(200, body));
      client.events.v1.subscriptions.each(() => done());
    }
  );
  it('should treat the second arg as a callback',
    function(done) {
      var body = {
          'subscriptions': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'A subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
                  }
              },
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'Another subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab/SubscribedEvents'
                  }
              }
          ],
          'meta': {
              'page': 0,
              'page_size': 20,
              'first_page_url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'previous_page_url': null,
              'url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'next_page_url': null,
              'key': 'subscriptions'
          }
      };
      holodeck.mock(new Response(200, body));
      client.events.v1.subscriptions.each({pageSize: 20}, () => done());
      holodeck.assertHasRequest(new Request({
          method: 'GET',
          url: 'https://events.twilio.com/v1/Subscriptions',
          params: {PageSize: 20},
      }));
    }
  );
  it('should find the callback in the opts object',
    function(done) {
      var body = {
          'subscriptions': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'A subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
                  }
              },
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'Another subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab/SubscribedEvents'
                  }
              }
          ],
          'meta': {
              'page': 0,
              'page_size': 20,
              'first_page_url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'previous_page_url': null,
              'url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'next_page_url': null,
              'key': 'subscriptions'
          }
      };
      holodeck.mock(new Response(200, body));
      client.events.v1.subscriptions.each({callback: () => done()}, () => fail('wrong callback!'));
    }
  );
  it('should generate valid list request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.events.v1.subscriptions.list();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://events.twilio.com/v1/Subscriptions';

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid read_empty response',
    function(done) {
      var body = {
          'subscriptions': [],
          'meta': {
              'page': 0,
              'page_size': 10,
              'first_page_url': 'https://events.twilio.com/v1/Subscriptions?PageSize=10&Page=0',
              'previous_page_url': null,
              'url': 'https://events.twilio.com/v1/Subscriptions?PageSize=10&Page=0',
              'next_page_url': null,
              'key': 'subscriptions'
          }
      };

      holodeck.mock(new Response(200, body));

      var promise = client.events.v1.subscriptions.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid read_results response',
    function(done) {
      var body = {
          'subscriptions': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'A subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
                  }
              },
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'Another subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab/SubscribedEvents'
                  }
              }
          ],
          'meta': {
              'page': 0,
              'page_size': 20,
              'first_page_url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'previous_page_url': null,
              'url': 'https://events.twilio.com/v1/Subscriptions?PageSize=20&Page=0',
              'next_page_url': null,
              'key': 'subscriptions'
          }
      };

      holodeck.mock(new Response(200, body));

      var promise = client.events.v1.subscriptions.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid read_results_filtered_by_sink_sid response',
    function(done) {
      var body = {
          'subscriptions': [
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'A subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
                  }
              },
              {
                  'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'date_created': '2015-07-30T20:00:00Z',
                  'date_updated': '2015-07-30T20:01:33Z',
                  'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
                  'description': 'Another subscription',
                  'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
                  'links': {
                      'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab/SubscribedEvents'
                  }
              }
          ],
          'meta': {
              'page': 0,
              'page_size': 10,
              'first_page_url': 'https://events.twilio.com/v1/Subscriptions?SinkSid=DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&PageSize=10&Page=0',
              'previous_page_url': null,
              'url': 'https://events.twilio.com/v1/Subscriptions?SinkSid=DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&PageSize=10&Page=0',
              'next_page_url': null,
              'key': 'subscriptions'
          }
      };

      holodeck.mock(new Response(200, body));

      var promise = client.events.v1.subscriptions.list();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid fetch request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.events.v1.subscriptions('DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://events.twilio.com/v1/Subscriptions/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'GET',
        url: url
      }));
    }
  );
  it('should generate valid fetch response',
    function(done) {
      var body = {
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_created': '2015-07-30T20:00:00Z',
          'date_updated': '2015-07-30T20:01:33Z',
          'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'description': 'A subscription',
          'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'links': {
              'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
          }
      };

      holodeck.mock(new Response(200, body));

      var promise = client.events.v1.subscriptions('DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').fetch();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid create request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var opts = {description: 'description', sinkSid: 'DGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', types: [{}]};
      var promise = client.events.v1.subscriptions.create(opts);
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var url = 'https://events.twilio.com/v1/Subscriptions';

      var values = {
        Description: 'description',
        SinkSid: 'DGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',
        Types: serialize.map([{}], function(e) { return serialize.object(e); }),
      };
      holodeck.assertHasRequest(new Request({
          method: 'POST',
          url: url,
          data: values
      }));
    }
  );
  it('should generate valid create response',
    function(done) {
      var body = {
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_created': '2015-07-30T20:00:00Z',
          'date_updated': '2015-07-30T20:01:33Z',
          'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'description': 'A subscription',
          'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'links': {
              'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
          }
      };

      holodeck.mock(new Response(201, body));

      var opts = {description: 'description', sinkSid: 'DGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', types: [{}]};
      var promise = client.events.v1.subscriptions.create(opts);
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid update request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.events.v1.subscriptions('DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://events.twilio.com/v1/Subscriptions/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'POST',
        url: url
      }));
    }
  );
  it('should generate valid update response',
    function(done) {
      var body = {
          'account_sid': 'ACaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'date_created': '2015-07-30T20:00:00Z',
          'date_updated': '2020-07-30T20:01:33Z',
          'sid': 'DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'sink_sid': 'DGaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab',
          'description': 'Updated description',
          'url': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
          'links': {
              'subscribed_events': 'https://events.twilio.com/v1/Subscriptions/DFaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/SubscribedEvents'
          }
      };

      holodeck.mock(new Response(200, body));

      var promise = client.events.v1.subscriptions('DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').update();
      promise.then(function(response) {
        expect(response).toBeDefined();
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
  it('should generate valid remove request',
    function(done) {
      holodeck.mock(new Response(500, {}));

      var promise = client.events.v1.subscriptions('DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function() {
        throw new Error('failed');
      }, function(error) {
        expect(error.constructor).toBe(RestException.prototype.constructor);
        done();
      }).done();

      var sid = 'DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX';
      var url = `https://events.twilio.com/v1/Subscriptions/${sid}`;

      holodeck.assertHasRequest(new Request({
        method: 'DELETE',
        url: url
      }));
    }
  );
  it('should generate valid delete response',
    function(done) {
      var body = null;

      holodeck.mock(new Response(204, body));

      var promise = client.events.v1.subscriptions('DFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX').remove();
      promise.then(function(response) {
        expect(response).toBe(true);
        done();
      }, function() {
        throw new Error('failed');
      }).done();
    }
  );
});
